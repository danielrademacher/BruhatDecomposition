<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_SpecialUnitaryGroup">
<Heading>Special Unitary Group</Heading>

<P/>
 This chapter deals with the special unitary group
<Section Label="Section_LabelIntroductionAndQuickStartSU">
<Heading>Introduction and Quick Start of functions for SU</Heading>

<P/>
 TODO
</Section>


<Section Label="Section_LabelFunctionsSU">
<Heading>Functions for SU</Heading>

<ManSection>
  <Func Arg="perm dim fld" Name="MakePermutationMat" />
 <Returns>The permutation matrix of perm over <M>M_{d x d}(fld)</M> (ie <M>res_{i,j} = One(fld)</M> if <M>i^{perm} = j</M>)
</Returns>
 <Description>
 perm: A permutation, <M>\newline</M>
 dim: A natural number, <M>\newline</M>
 fld: A field <M>\newline</M>
 This is the same function as MyPermutationMat.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="d q" Name="LGOStandardGensSU" />
 <Returns>stdgens (the LGO standard-generators of SU<M>(d,q)</M>)
</Returns>
 <Description>
 <M>d</M>: The dimension of our matrix. <M>\newline</M>
 <M>q</M>: A prime power <M>q = p^f</M>, where <M>F_q</M> ist the field whereover the matrices are defined <M>\newline</M>
 This function computes the standard generators of SU
 as given by C. R. Leedham-Green and E. A. O'Brien in
 "Constructive Recognition of Classical Groups in odd characteristic". If q is even, <C>LGOStandardGensSUEvenChar(d,q)</C> is called automatically.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="d q" Name="LGOStandardGensSUEvenChar" />
 <Returns>stdgens (the LGO standard-generators of SU<M>(d,q)</M>) for q even
</Returns>
 <Description>
 <M>d</M>: The dimension of our matrix. <M>\newline</M>
 <M>q</M>: A 2 power <M>q = 2^f</M>, where <M>F_q</M> ist the field whereover the matrices are defined <M>\newline</M>
 This function computes the standard generators of Sp
 as given by C. R. Leedham-Green and E. A. O'Brien in
 "Constructive Recognition of Classical Groups in even characteristic"
 </Description>
</ManSection>


<ManSection>
  <Func Arg="fld, alpha, basis" Name="CoefficientsPrimitiveElementS" />
 <Returns>Coefficients (A vector c sth alpha = sum c[i] b[i])
</Returns>
 <Description>
 fld: A field, <M>\newline</M>
 alpha: An element of fld <M>\newline</M>
 basis: A <M>F_p</M> basis of fld <M>\newline</M>
 It expresses an element alpha in a field fld as
 a linear combination of the basis elements.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens g" Name="UnitriangularDecompositionSUEven" />
 <Returns>slp (A list of instructions yielding <M>u_1,u_2</M> if evaluated as SLP), <M>[u_1,g,u_2]</M> (The matrices of the Bruhat-Decomposition)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 g: A matrix in SU(<M>d,q</M>) where d is even and q is odd <M>\newline</M>
 Computes the Unitriangular decomposition of the matrix <M>g</M>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens g" Name="UnitriangularDecompositionSUEvenAndEvenChar" />
 <Returns>slp (A list of instructions yielding <M>u_1,u_2</M> if evaluated as SLP), <M>[u_1,g,u_2]</M> (The matrices of the Bruhat-Decomposition)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 g: A matrix in SU(<M>d,q</M>) where d is even and q is even <M>\newline</M>
 Computes the Unitriangular decomposition of the matrix <M>g</M>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens g" Name="UnitriangularDecompositionSUOdd" />
 <Returns>slp (A list of instructions yielding <M>u_1,u_2</M> if evaluated as SLP), <M>[u_1,g,u_2]</M> (The matrices of the Bruhat-Decomposition)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 g: A matrix in SU(<M>d,q</M>) where d is odd and q is odd <M>\newline</M>
 Computes the Unitriangular decomposition of the matrix <M>g</M>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens g" Name="UnitriangularDecompositionSU" />
 <Returns>slp (A list of instructions yielding <M>u_1,u_2</M> if evaluated as SLP), <M>[u_1,g,u_2]</M> (The matrices of the Bruhat-Decomposition)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 g: A matrix in SU(<M>d,q</M>) <M>\newline</M>
 Computes the Unitriangular decomposition of the matrix <M>g</M>. Depending on q and d the correct function of <C>UnitriangularDecompositionSUEven</C>, <C>UnitriangularDecompositionSUOdd</C> and <C>UnitriangularDecompositionSUOdd</C> is choosen.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens mat slp" Name="MonomialSLPSUOdd" />
 <Returns>slp (A list of instructions to evaluate tmpvalue. If slp is also given as input then this instructions are added to slp), [tmpvalue,diag] (tmpvalue is a monomial matix such that tmpvalue*mat = diag where diag is a diagonal matrix)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 mat: A monomial matrix (ie <M>w</M>) in SU<M>(d,q)</M> with <M>d</M> even and <M>q</M> odd <M>\newline</M>
 slp: An already existing list of instructions *optional <M>\newline</M>
 In this function we will transform a monomial matrix <M>mat \in</M> SU<M>(d,q)</M> with <M>d</M> even and <M>q</M> odd into
 a diagonal matrix diag. Using only the standard-generators <M>s,u,v</M> this
 will lead to a monomial matrix tmpvalue
 and <M>tmpvalue^{-1} \cdot diag = mat</M> (i.e. diag = tmpvalue*mat ).
 Furthermore we will return list slp of instructions which will
 (when evaluated at the LGO standard-generators) yields diag.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens mat slp" Name="MonomialSLPSUEvenAndEvenChar" />
 <Returns>slp (A list of instructions to evaluate tmpvalue. If slp is also given as input then this instructions are added to slp), [tmpvalue,diag] (tmpvalue is a monomial matix such that tmpvalue*mat = diag where diag is a diagonal matrix)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 mat: A monomial matrix (ie <M>w</M>) in SU<M>(d,q)</M> with <M>d</M> even and <M>q</M> even <M>\newline</M>
 slp: An already existing list of instructions *optional <M>\newline</M>
 In this function we will transform a monomial matrix <M>mat \in</M> SU<M>(d,q)</M> with <M>d</M> even and <M>q</M> even into
 a diagonal matrix diag. Using only the standard-generators <M>s,u,v</M> this
 will lead to a monomial matrix tmpvalue
 and <M>tmpvalue^{-1} \cdot diag = mat</M> (i.e. diag = tmpvalue*mat ).
 Furthermore we will return list slp of instructions which will
 (when evaluated at the LGO standard-generators) yields diag.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens mat slp" Name="MonomialSLPSUEven" />
 <Returns>slp (A list of instructions to evaluate tmpvalue. If slp is also given as input then this instructions are added to slp), [tmpvalue,diag] (tmpvalue is a monomial matix such that tmpvalue*mat = diag where diag is a diagonal matrix)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 mat: A monomial matrix (ie <M>w</M>) in SU<M>(d,q)</M> with <M>d</M> odd and <M>q</M> odd <M>\newline</M>
 slp: An already existing list of instructions *optional <M>\newline</M>
 In this function we will transform a monomial matrix <M>mat \in</M> SU<M>(d,q)</M> with <M>d</M> odd and <M>q</M> odd into
 a diagonal matrix diag. Using only the standard-generators <M>s,u,v</M> this
 will lead to a monomial matrix tmpvalue
 and <M>tmpvalue^{-1} \cdot diag = mat</M> (i.e. diag = tmpvalue*mat ).
 Furthermore we will return list slp of instructions which will
 (when evaluated at the LGO standard-generators) yields diag.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="perm m" Name="CheckContinue" />
 <Returns>True or false
</Returns>
 <Description>
 perm: A permutation <M>\newline</M>
 m: A natural number. If this function is called by <C>MonomialSLPSU</C> then <M>m = \frac{d}{2}</M> or <M>m = \frac{(d-1)}{2}</M> <M>\newline</M>
 This is a help function for <C>MonomialSLPSU</C>. This function checks whether for all cycle c of perm holds: LargestMovedPoint(c) <M>\leq</M> m or SmallestMovedPoint(c) &gt; m.
 Notice that this is the condition for the main loop of <C>MonomialSLPSU</C>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="g" Name="CycleFromPermutation" />
 <Returns>List of permutations
</Returns>
 <Description>
 g: A permutation <M>\newline</M>
 This is a help function for <C>MonomialSLPSUOdd</C>. This function computes the cycles of g and stores them in the output list.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="nc h" Name="CycleFromListMine" />
 <Returns>TODO
</Returns>
 <Description>
 nc: A subset of [1,...,h] <M>\newline</M>
 h: A natural number (the largest moved point of a permutation) <M>\newline</M>
 This is a help function for <C>CycleFromPermutation</C>. This function computes a cycle in Sym_h which corresponds to nc.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens diag slp" Name="DiagSLPSUOdd" />
 <Returns>slp (A list of instructions to evaluate diag if slp was Input then this instructions are added to slp)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 diag: A diagonal matrix (eg diag) in SU<M>(d,q)</M> with <M>d</M> odd and <M>q</M> odd <M>\newline</M>
 slp: An already existing list of instructions *optional <M>\newline</M>
 Writes a list of instructions which evaluated with LGO standard-generators
 yield the diagonal matrix of the input.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens diag slp" Name="DiagSLPSU" />
 <Returns>slp (A list of instructions to evaluate diag if slp was Input then this instructions are added to slp)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 diag: A diagonal matrix (eg diag) in SU<M>(d,q)</M> <M>\newline</M>
 slp: An already existing list of instructions *optional <M>\newline</M>
 Writes a list of instructions which evaluated with LGO standard-generators
 yield the diagonal matrix of the input. Depending on q and d the correct function of <C>DiagSLPSUEven</C>, <C>DiagSLPSUEvenAndEvenChar</C> and <C>DiagSLPSUOdd</C> is choosen.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens diag slp" Name="DiagSLPSUEven" />
 <Returns>slp (A list of instructions to evaluate diag if slp was Input then this instructions are added to slp)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 diag: A diagonal matrix (eg diag) in SU<M>(d,q)</M> with <M>d</M> even and <M>q</M> odd <M>\newline</M>
 slp: An already existing list of instructions *optional <M>\newline</M>
 Writes a list of instructions which evaluated with LGO standard-generators
 yield the diagonal matrix of the input.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens diag slp" Name="DiagSLPSUEvenAndEvenChar" />
 <Returns>slp (A list of instructions to evaluate diag if slp was Input then this instructions are added to slp)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M>\newline</M>
 diag: A diagonal matrix (eg diag) in SU<M>(d,q)</M> with <M>d</M> even and <M>q</M> even <M>\newline</M>
 slp: An already existing list of instructions *optional <M>\newline</M>
 Writes a list of instructions which evaluated with LGO standard-generators
 yield the diagonal matrix of the input.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="stdgens g" Name="BruhatDecompositionSU" />
 <Returns>pgr (A SLP to compute <M>u_1,u_2,p_{sign}</M> and <M>diag</M> and the matrices <M>u_1, u_2, p_{sign}</M> and <M>diag</M> itself.)
</Returns>
 <Description>
 stdgens: The LGO standard-generators <M> \newline </M>
 g: A matrix in SU<M>(d,q)</M> <M> \newline </M>
 Uses <C>UnitriangularDecompositionSU()</C>, <C>MonomialSLPSU()</C> and <C>DiagSLPSU()</C>
 to write a matrix <M>g \in</M> SU<M>(d,q)</M> as <M>g = u_1^{-1} \cdot p_{sign} \cdot diag \cdot u_2^{-1}</M>
 where <M>u_1,u_2</M> are lower unitriangular matrices, <M>p_{sign}</M> is a monomial matrix and <M>diag</M> a diagonal matrix.
 It furthermore yields an SLP that returns the above matrices if evaluated
 with the LGO standard-generators.
 </Description>
</ManSection>


</Section>


</Chapter>

